       1                                        .title  pdp11 SOC mini monitor
       2                                
       3                                ;=======================================================
       4                                ;=======================================================
       5                                ;  pdp11 SOC mini monitor
       6                                ;=======================================================
       7                                ;=======================================================
       8                                
       9                                ;=======================================================
      10                                ; Defines
      11                                ;=======================================================
      12                                
      13                                ; UART register addresses
      14                                ;
      15 170000                         u1cntl  =170000
      16 170000                         u1stat  =170000
      17 170002                         u1brsr  =170002
      18 170004                         u1mask  =170004
      19 170006                         u1data  =170006
      20                                
      21                                ; UART baud rate
      22                                ;
      23 074343                         baud    =074343    ; 115200
      24                                
      25                                ; UART status register bit definitions
      26                                ;
      27 000100                         frmerr  =100
      28 000040                         prterr  =040
      29 000020                         ovrerr  =020
      30 000010                         txempt  =010
      31 000004                         txnotf  =004
      32 000002                         rxfull  =002
      33 000001                         rxnote  =001
      34                                
      35                                ; Timer register addresses
      36                                ;
      37 170010                         t1cntl  =170010
      38 170010                         t1stat  =170010
      39 170012                         t1icnt  =170012
      40                                
      41 011610                         tm5sec  =011610    ; 5 seconds
      42 000001                         tmstrt  =000001    ; start timer
      43 000001                         tmdone  =000001    ; timer done
      44 000000                         tmstop  =000000    ; stop timer
      45                                
      46                                ; Other register address
      47                                ;
      48 170014                         oporta  =170014    ; port A
      49 170016                         imask   =170016    ; interrupt mask
      50 170020                         r8cntl  =170020    ; random number start/stop
      51 170020                         r8data  =170020    ; random number
      52 170022                         r8mask  =170022    ; random number mask
      53 170024                         isrc    =170024    ; interrupt source
      54                                
      55                                ; Initial Stack Pointer
      56                                ;
      57 017777                         stktop  =17777    ; top of 8k RAM space
      58                                
      59                                        .asect
      60 000000                                 .=0
      61                                
      62                                ;=======================================================
      63                                ; Start Point
      64                                ;=======================================================
      65                                
      66 000000 012706  017777          start:  mov  #stktop, sp      ; init the stack
      67 000004 004737  000200                  jsr  pc,@#initu1      ; init the UART
      68                                
      69 000010 012701  000702                  mov  #banner,r1       ; r1 gets string pointer
      70 000014 004737  000216                  jsr  pc,@#puts        ; print hello message
      71                                
      72 000020 012701  000740          main:   mov  #prompt,r1       ; r1 gets string pointer
      73 000024 004737  000216                  jsr  pc,@#puts        ; print prompt
      74                                
      75 000030 004737  000250                  jsr  pc,@#getc        ; get a char
      76 000034 004737  000232                  jsr  pc,@#putc        ; put a char
      77 000040 004737  000554                  jsr  pc,@#touppr      ; to upper case
      78                                
      79 000044 022700  000110                  cmp  #110,r0          ; H: help
      80 000050 001426                          beq  cxhelp
      81                                
      82 000052 022700  000103                  cmp  #103,r0          ; C: clear screen
      83 000056 001430                          beq  cxclr
      84                                
      85 000060 022700  000122                  cmp  #122,r0          ; R: restart
      86 000064 001745                          beq  start
      87                                
      88 000066 022700  000117                  cmp  #117,r0          ; O: output to port
      89 000072 001427                          beq  cxout
      90                                
      91 000074 022700  000107                  cmp  #107,r0          ; G: goto address
      92 000100 001427                          beq  cxgoto
      93                                
      94 000102 022700  000104                  cmp  #104,r0          ; D: dump memory
      95 000106 001427                          beq  cxdump
      96                                
      97 000110 022700  000015                  cmp  #15,r0           ; enter key
      98 000114 001741                          beq  main
      99                                
     100 000116 012701  001247                  mov  #unknwn,r1       ; unknown command
     101 000122 004737  000216                  jsr  pc,@#puts
     102                                
     103 000126 012701  000745          cxhelp: mov  #hlpmsg,r1       ; help message
     104 000132 004737  000216                  jsr  pc,@#puts
     105 000136 000730                          br   main
     106                                
     107 000140 012701  001321          cxclr:  mov  #clrscr,r1       ; clear the screen
     108 000144 004737  000216                  jsr  pc,@#puts
     109 000150 000723                          br   main
     110                                
     111 000152 005237  170014          cxout:  inc  @#oporta         ; blink LED
     112 000156 000720                          br   main
     113                                
     114 000160 004737  000266          cxgoto: jsr  pc,@#getadr      ; get  address
     115 000164 000113                          jmp  (r3)             ; goto address
     116                                
     117 000166 004737  000266          cxdump: jsr  pc,@#getadr      ; get  address
     118 000172 004737  000410                  jsr  pc,@#dmpmem      ; dump memory
     119 000176 000710                          br   main
     120                                
     121                                
     122                                ;=======================================================
     123                                ; Initialize the UART
     124                                ;=======================================================
     125 000200 012737  074343  170002  initu1: mov  #baud,@#u1brsr   ; baud rate
     126 000206 012737  000003  170000          mov  #03,@#u1cntl     ; enable tx and rx
     127 000214 000207                          rts  pc
     128                                
     129                                ;===========================================================
     130                                ; Send a string to the UART
     131                                ;   r1 contains pointer to string
     132                                ;   r0 gets the next character
     133                                ;===========================================================
     134 000216 112100                  puts:   movb (r1)+, r0        ; load r0 with next char
     135 000220 001403                          beq  putx             ; exit if done
     136 000222 004737  000232                  jsr  pc,@#putc        ; put a character
     137 000226 000773                          br   puts             ; repeat
     138 000230 000207                  putx:   rts  pc               ; done
     139                                
     140                                ;===========================================================
     141                                ; Send a character to the UART
     142                                ;   r0 has the character to send
     143                                ;===========================================================
     144 000232 133727  170000  000004  putc:   bitb @#u1stat,#txnotfull   ; TX full?
     145 000240 001774                          beq  putc                  ; wait if full
     146 000242 110037  170006                  movb r0,@#u1data           ; put a character
     147 000246 000207                          rts  pc
     148                                
     149                                ;=======================================================
     150                                ; Get a character from the UART
     151                                ;   r0 gets the received character
     152                                ;=======================================================
     153 000250 133727  170000  000001  getc:   bitb @#u1stat,#rxnotempty  ; RX has char?
     154 000256 001774                          beq  getc                  ; wait if empty
     155 000260 113700  170006                  movb @#u1data,r0           ; get a character
     156 000264 000207                          rts  pc
     157                                
     158                                ;=======================================================
     159                                ; Get address (6-digit ascii octal to binary)
     160                                ;   r3 gets the address in binary
     161                                ;=======================================================
     162 000266 012700  000040          getadr: mov  #40,r0         ; put a space
     163 000272 004737  000232                  jsr  pc,@#putc
     164 000276 012704  000006                  mov  #6,r4          ; loop counter
     165 000302 012705  001334                  mov  #buffer,r5     ; pointer
     166 000306 004737  000250          getad1: jsr  pc,@#getc
     167 000312 004737  000232                  jsr  pc,@#putc
     168 000316 004737  000622                  jsr  pc,@#isoct     ; check if octal
     169 000322 103006                          bcc  getad2         ; branch if digit
     170 000324 012701  001273                  mov  #nonoct,r1
     171 000330 004737  000216                  jsr  pc,@#puts      ; reject non-octal
     172 000334 005003                          clr  r3             ; and return zero
     173 000336 000207                          rts  pc
     174 000340 162700  000060          getad2: sub  #60,r0         ; ascii to binary
     175 000344 110025                          movb r0,(r5)+       ; store digit
     176 000346 005304                          dec  r4
     177 000350 001356                          bne  getad1
     178 000352 012704  000005                  mov  #5,r4          ; loop counter
     179 000356 012705  001334                  mov  #buffer,r5     ; point to MSB
     180 000362 112503                          movb (r5)+,r3
     181 000364 006303                  getad3: asl  r3             ; x2
     182 000366 006303                          asl  r3             ; x4
     183 000370 006303                          asl  r3             ; x8
     184 000372 112502                          movb (r5)+,r2
     185 000374 060203                          add  r2,r3
     186 000376 005304                          dec  r4
     187 000400 001371                          bne  getad3
     188 000402 042703  000001                  bic  #1,r3          ; odd to even
     189 000406 000207                          rts  pc
     190                                
     191                                ;=======================================================
     192                                ; Dump memory
     193                                ;   r3 has the starting binary address
     194                                ;=======================================================
     195 000410 012701  000735          dmpmem: mov  #crlf,r1       ; r1 gets string pointer
     196 000414 004737  000216                  jsr  pc,@#puts      ; print CRLF
     197 000420 012704  000400                  mov  #400,r4        ; outer loop counter
     198 000424 012705  000010                  mov  #10,r5         ; inner loop counter
     199 000430 012300                  dumpm2: mov  (r3)+,r0       ; get memory
     200 000432 004737  000474                  jsr  pc,@#i2oct
     201 000436 012701  001334                  mov  #buffer,r1     ; r1 gets string pointer
     202 000442 004737  000216                  jsr  pc,@#puts      ; print memory contents
     203 000446 005305                          dec  r5
     204 000450 001006                          bne  dumpm3
     205 000452 012701  000735                  mov  #crlf,r1       ; r1 gets string pointer
     206 000456 004737  000216                  jsr  pc,@#puts      ; print CRLF
     207 000462 012705  000010                  mov  #10,r5         ; inner loop counter
     208 000466 005304                  dumpm3: dec  r4
     209 000470 001357                          bne  dumpm2
     210 000472 000207                          rts  pc
     211                                
     212                                ;=======================================================
     213                                ; Convert binary to ASCII octal
     214                                ;=======================================================
     215 000474 012702  001344          i2oct:  mov  #buffer+10,r2
     216 000500 112742  000000                  movb #0,-(r2)       ; end of string
     217 000504 112742  000040                  movb #40,-(r2)      ; space
     218 000510 010001                  i2oc2:  mov  r0,r1          ; start with LSB
     219 000512 042701  177770                  bic  #177770,r1
     220 000516 062701  000060                  add  #60,r1
     221 000522 110142                          movb r1,-(r2)       ; store digit
     222 000524 006200                          asr  r0
     223 000526 006200                          asr  r0
     224 000530 006200                          asr  r0
     225 000532 022702  001335                  cmp  #buffer+1,r2
     226 000536 001364                          bne  i2oc2
     227 000540 042701  177776          i2ocx:  bic  #177776,r1     ; MSB
     228 000544 062701  000060                  add  #60,r1
     229 000550 110142                          movb r1,-(r2)       ; store last digit
     230 000552 000207                          rts  pc
     231                                
     232                                ;=======================================================
     233                                ; Convert to upper case
     234                                ;=======================================================
     235 000554 022700  000141          touppr: cmp  #141,r0        ; check lower bound
     236 000560 002405                          blt  touppx         ; return if below 'a'
     237 000562 022700  000172                  cmp  #172,r0        ; check upper bound
     238 000566 003002                          bgt  touppx         ; return if above 'z'
     239 000570 162700  000040                  sub  #40,r0         ; convert to upper
     240 000574 000207                  touppx: rts  pc
     241                                
     242                                ;=======================================================
     243                                ; Check if digit (clear carry bit if digit)
     244                                ;=======================================================
     245 000576 022700  000060          isdig:  cmp  #60,r0         ; check lower bound
     246 000602 002405                          blt  nodig          ; return if below '0'
     247 000604 022700  000071                  cmp  #71,r0         ; check upper bound
     248 000610 003002                          bgt  nodig          ; return if above '9'
     249 000612 000241                          clc                 ; is digit: clear carry
     250 000614 000207                          rts  pc
     251 000616 000261                  nodig:  sec                 ; no digit: set carry
     252 000620 000207                          rts  pc
     253                                
     254                                ;=======================================================
     255                                ; Check if octal (clear carry bit if octal)
     256                                ;=======================================================
     257 000622 022700  000060          isoct:  cmp  #60,r0         ; check lower bound
     258 000626 002405                          blt  nooct          ; return if below '0'
     259 000630 022700  000067                  cmp  #67,r0         ; check upper bound
     260 000634 003002                          bgt  nooct          ; return if above '7'
     261 000636 000241                          clc                 ; is octal: clear carry
     262 000640 000207                          rts  pc
     263 000642 000261                  nooct:  sec                 ; no octal: set carry
     264 000644 000207                          rts  pc
     265                                
     266                                ;===========================================================
     267                                ; Wait
     268                                ;===========================================================
     269 000646 012737  011610  170012  wait1:  mov  #tm5sec,@#t1icnt      ; initial count
     270 000654 012737  000001  170010          mov  #tmstrt,@#t1cntl      ; start timer
     271 000662 033727  170010  000001  wait2:  bit  @#t1stat,#tmdone      ; check status
     272 000670 001774                          beq  wait2                 ; loop if not done
     273 000672 012737  000000  170010          mov  #tmstop,@#t1cntl      ; stop timer
     274 000700 000207                          rts  pc
     275                                
     276                                
     277                                ;=======================================================
     278                                ; String constants and temp data storage
     279                                ;=======================================================
     280                                
     281 000702    015     012          banner: .byte   15,12
     282 000704    127     145     154          .ascii  "Welcome to PDP-11 Monitor"
         000707    143     157     155  
         000712    145     040     164  
         000715    157     040     120  
         000720    104     120     055  
         000723    061     061     040  
         000726    115     157     156  
         000731    151     164     157  
         000734    162                  
     283 000735    015     012     000  crlf:   .byte   15,12,0
     284                                
     285 000740    015     012     076  prompt: .byte   15,12,76,40,0
         000743    040     000          
     286                                
     287 000745    015     012     015  hlpmsg: .byte   15,12,15,12
         000750    012                  
     288 000751    103     157     155          .ascii  "Command Summary:"
         000754    155     141     156  
         000757    144     040     123  
         000762    165     155     155  
         000765    141     162     171  
         000770    072                  
     289 000771    015     012                  .byte   15,12
     290 000773    150     040     040          .ascii  "h      .. print this help message"
         000776    040     040     040  
         001001    040     056     056  
         001004    040     160     162  
         001007    151     156     164  
         001012    040     164     150  
         001015    151     163     040  
         001020    150     145     154  
         001023    160     040     155  
         001026    145     163     163  
         001031    141     147     145  
     291 001034    015     012                  .byte   15,12
     292 001036    143     040     040          .ascii  "c      .. clear screen"
         001041    040     040     040  
         001044    040     056     056  
         001047    040     143     154  
         001052    145     141     162  
         001055    040     163     143  
         001060    162     145     145  
         001063    156                  
     293 001064    015     012                  .byte   15,12
     294 001066    162     040     040          .ascii  "r      .. soft reset"
         001071    040     040     040  
         001074    040     056     056  
         001077    040     163     157  
         001102    146     164     040  
         001105    162     145     163  
         001110    145     164          
     295 001112    015     012                  .byte   15,12
     296 001114    157     040     040          .ascii  "o      .. toggle output port"
         001117    040     040     040  
         001122    040     056     056  
         001125    040     164     157  
         001130    147     147     154  
         001133    145     040     157  
         001136    165     164     160  
         001141    165     164     040  
         001144    160     157     162  
         001147    164                  
     297 001150    015     012                  .byte   15,12
     298 001152    147     040     141          .ascii  "g addr .. jump to address"
         001155    144     144     162  
         001160    040     056     056  
         001163    040     152     165  
         001166    155     160     040  
         001171    164     157     040  
         001174    141     144     144  
         001177    162     145     163  
         001202    163                  
     299 001203    015     012                  .byte   15,12
     300 001205    144     040     141          .ascii  "d addr .. dump mem at address"
         001210    144     144     162  
         001213    040     056     056  
         001216    040     144     165  
         001221    155     160     040  
         001224    155     145     155  
         001227    040     141     164  
         001232    040     141     144  
         001235    144     162     145  
         001240    163     163          
     301 001242    015     012     015          .byte   15,12,15,12,0
         001245    012     000          
     302                                
     303 001247    015     012          unknwn: .byte   15,12
     304 001251    125     156     153          .ascii  "Unknown Command"
         001254    156     157     167  
         001257    156     040     103  
         001262    157     155     155  
         001265    141     156     144  
     305 001270    015     012     000          .byte   15,12,0
     306                                
     307 001273    015     012          nonoct: .byte   15,12
     308 001275    116     157     156          .ascii  "Non-Octal Address"
         001300    055     117     143  
         001303    164     141     154  
         001306    040     101     144  
         001311    144     162     145  
         001314    163     163          
     309 001316    015     012     000          .byte   15,12,0
     310                                
     311 001321    033     133     062  clrscr: .byte   33,133,62,112
         001324    112                  
     312 001325    033     133     061          .byte   33,133,61,73,61,110,0
         001330    073     061     110  
         001333    000                  
     313                                
     314 001334    000     000     000  buffer: .byte   0,0,0,0,0,0,0,0
         001337    000     000     000  
         001342    000     000          
     315 001344    000     000     000  zeros:  .byte   0,0,0,0,0,0,0,0
         001347    000     000     000  
         001352    000     000          
     316                                
     317                                        .end
     317                                
